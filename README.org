#+TITLE: Programming in Haskell - Graham Hutton - Ch10 - Hangman
#+AUTHOR: Firwanaa
#+PROPERTY: header-args :tangle code.hs
#+auto_tangle: t
#+STARTUP: showeverything

* TABLE OF CONTENTS :toc:
- [[#hangman-with-haskell][Hangman With Haskell]]
- [[#imports][Imports]]
- [[#how-to-play][How to play:]]
- [[#enter-secret-word][Enter secret word]]
- [[#sgetline-function][sgetLine function]]
- [[#getch-function][getCh function]]

* Hangman With Haskell
Basics of IO programming using a variant of the game Hangman.
* Imports
#+begin_src haskell
module Main where
import Data.List
import System.IO
#+end_src
* How to play:
 - One player secretly enter a word.
 - Another player then tries to deduce the word via a series of guesses.
 - For each guess, we indicate which letter in the secret word occur in the guess.
 - The game end when the guess is correct.

The game will be in a top-down manner:
 - Prompts first player to enter the secret word.
 - Then ask the second player to guess it.

* Enter secret word
#+begin_src haskell
hangman :: IO ()
hangman = do putStrLn "Think of a word:"
             word <- sgetLine
             putStrLn "Try to guess it:"
             play word
#+end_src

* sgetLine function
Reads string from keyboard and echos each characters dash symbol "-".
#+begin_src haskell
sgetLine = do x <- getCh
              if x == '\n' then
                do putChar x
                     return []
              else
                do putChar '-'
                   xs <- sgetLine
                   return (x:xs)
#+end_src

* getCh function
Reads single character from the keyboard without echoing it to the screen.
#+begin_src haskell
getCh :: IO Char
getCh = do hSetEcho stdin False
           x <- getChar
           hSetEcho stdin True
           return x
#+end_src
